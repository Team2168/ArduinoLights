

   
#include "LPD8806.h"
#include "SPI.h"

//Hardware Pins
int clockPin = 2;
int dataPin1 = 11;

//Strip Length Data
int IntakeStripLength = 32;
int IntakeSideLeftPxZero = 0;
int IntakeSideLeftLength = 8;
int IntakeFrontLeftPxZero = 9;
int IntakeFrontLeftLength = 8;
int IntakeFrontRightPxZero = 17;
int IntakeFrontRightLength = 8;
int IntakeSideRightPxZero = 24;
int IntakeSideRightLength = 8;

int i = 0,
    j = 0;
       
LPD8806 strip(IntakeStripLength, dataPin1, clockPin);

void DisabledRobot();
void EnabledRobot();
void ShotReady();
void TuskRetractPosition();
void TuskIntermediatePosition();
void TuskExtendedPosition();
void HotGoalLeft();
void HotGoalRight();

int retValue = 0;
int lastretValue = 0;

void setup() {

  strip.begin();
  for(int q = 0; q < strip.numPixels(); q++) {
  strip.setPixelColor(q, strip.Color(0,127,0)); // green
  }
  strip.show();
  delay(1000);
   
     //Set digital pins 3-9 as inputs
  //Note, pins 10 - 13 are in use by the SPI library. 
  pinMode(3, INPUT);
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  pinMode(7, INPUT);
  pinMode(8, INPUT);
  pinMode(9, INPUT);
  
  pinMode(13, OUTPUT); // set pin8 as OUTPUT for testing purpose
  digitalWrite(13, HIGH); // write 5V to PIN 8
  
  Serial.begin(9600); // Serial Monitor
}

void loop() {
  // COMMUNICATION PROTOCOL - BITMAP
  // BIT(S)     Meaning
  // ------------------------------
  //   1        Enabled Robot 
  //   2        Disabled Robot
  //   4        Shot Ready
  //   8        TuskRetractPosition
  //   16        TuskIntermediatePosition
  //   32       TuskExtendedPosition
  //   64       HotGoalLeft
  //   128       HotGoalRight
  
  lastretValue = retValue;
  retValue = 0;
  //Read signals for cRIO
   if(digitalRead(3) == HIGH) {
     retValue = 1;
  }
  //delay(200);
    Serial.println(retValue);
   if(digitalRead(4) == HIGH) {
     retValue = 2;
  }
  //delay(200);
    Serial.println(retValue);
   if(digitalRead(5) == HIGH) {
     retValue = 4;
  }
  //delay(200);
    Serial.println(retValue);
   if(digitalRead(6) == HIGH) {
     retValue = 8;
  }
  //delay(200);
    Serial.println(retValue); 
   if(digitalRead(7) == HIGH) {
     retValue = 16;
  }
  //delay(200);
    Serial.println(retValue);
   if(digitalRead(8) == HIGH) {
     retValue = 32;
  }
  //delay(200);
    Serial.println(retValue);
   if(digitalRead(9) == HIGH) {
     retValue = 64;
  }
  //delay(200);
    Serial.println(retValue);
   
   if(digitalRead(10) == HIGH) {
     retValue = 128;
  }
  //delay(200);
    Serial.println(retValue);
  
  if(retValue != lastretValue) {
   i = 0; //If new data, restart the loop
  
   // Check the status of the bits in from the message:
   //EnabledRobot             = retValue & 0x0001;
   //ShotReady                = retValue & 0x0002;
   //TuskRetractPosition      = retValue & 0x0004;
   //TuskIntermediatePosition = retValue & 0x0008;
   //TuskExtendedPosition     = retValue & 0x0010;
   //HotGoalLeft              = retValue & 0x0020;
   //HotGoalRight             = retValue & 0x0040;
   //===================================================
   if(retValue & 0x0001) {
      EnabledRobot();
   }
   Serial.println("EnabledRobot");              // green
   //delay(100);
   //===================================================
   if(retValue & 0x0002) {
      DisabledRobot();
   }
   Serial.println("DisabledRobot");               // red
   //delay(100);
   //===================================================
   if(retValue & 0x0004) {   
      ShotReady();  
     }
   Serial.println("ShotReady");                  // blue
   //delay(100);
   //===================================================
   if(retValue & 0x0008) {   
     TuskRetractPosition();
     }
   Serial.println("TuskRetractPosition");         // red
   //delay(100);
   //===================================================
   if(retValue & 0x0010) {   
     TuskIntermediatePosition();
     }
   Serial.println("TuskIntermediatePosition");   // blue
   //delay(100); 
   //===================================================
    if(retValue & 0x0020) {   
     TuskExtendedPosition();
     }
   Serial.println("TuskExtendedPosition");      // green
   //delay(100);
   //===================================================
    if(retValue & 0x0040) {  
     HotGoalLeft();
     }
   Serial.println("HotGoalLeft");                 // red
   //delay(100);
   //===================================================
    if(retValue & 0x0080) {  
     HotGoalRight();
     }
   Serial.println("HotGoalRight");              // green
   //delay(100);
   //===================================================
   }
}
// Enabled Robot
void EnabledRobot() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //Green
  }
  strip.show();
}

// Disabled Robot
void DisabledRobot() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); //Red
  }  
  strip.show();
}

// Shot Ready
void ShotReady() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,0,127)); //Blue 
  }
  strip.show();
}

// Tusks Retracted
void TuskRetractPosition() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); // Red  
  } 
  strip.show();
}

// Tusks Intermediate
void TuskIntermediatePosition() {  
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,0,127)); //Blue      
  }
  strip.show(); 
} 

// Tusks Extended
void TuskExtendedPosition() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //green
  }
  strip.show();
}
  
// Auto Mode - Hot Goal Left
void HotGoalLeft() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); //Red
  }
  strip.show();
}

// Auto Mode - Hot Goal Right
void HotGoalRight() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //Green
  }
  strip.show();
}


