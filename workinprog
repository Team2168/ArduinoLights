//Intake Strip Length 32 LEDS

//Intake Side Left Length 0-7

//Intake Front Left Length 8-15

//Intake Front Right Length 16-23

//Intake Side Right Length 24-32

#include "LPD8806.h"
#include "SPI.h"

//Hardware Pins
int clockPin = 2;
int dataPin1 = 11;

//Strip Length Data
int IntakeStripLength = 32;
int IntakeSideLeftPxZero = 0;
int IntakeSideLeftLength = 8;
int IntakeFrontLeftPxZero = 9;
int IntakeFrontLeftLength = 8;
int IntakeFrontRightPxZero = 17;
int IntakeFrontRightLength = 8;
int IntakeSideRightPxZero = 24;
int IntakeSideRightLength = 8;

int i = 0,
    j = 0;   
    
LPD8806 strip(IntakeStripLength, dataPin1, clockPin);

void DisabledRobot();
void EnabledRobot();
void ShotReady();
void TuskRetractPosition();
void TuskIntermediatePosition();
void TuskExtendedPosition();
void HotGoalLeft();
void HotGoalRight();

int retValue = 0;
int lastretValue = 0;

void setup() {

  strip.begin();
  for(int q = 0; q < strip.numPixels(); q++) {
  strip.setPixelColor(q, strip.Color(0,127,0)); // green
  }
  strip.show();
  delay(200);
  
  //Set digital pins 3-9 as inputs
  //Note, pins 10 - 13 are in use by the SPI library. 
  pinMode(3, INPUT);
  pinMode(4, INPUT);
  pinMode(5, INPUT);
  pinMode(6, INPUT);
  pinMode(7, INPUT);
  pinMode(8, INPUT);
  pinMode(9, INPUT);

  pinMode(13, OUTPUT); // set pin8 as Output
  digitalWrite(13, HIGH); // write 5V to pin 8 
  
  Serial.begin(9600);  // Serial Monitor
} 

void loop() {
  lastretValue = retValue; 
  retValue = 0;
  //Read signals for cRIO
  Serial.println(retValue); // 0
  //delay(200);
  
   if(digitalRead(3) == HIGH) {  
     retValue = 1;
    Serial.println("DIGITAL PIN 3 HIGH"); 
    }
    
    Serial.println(retValue);    // 0
    //delay(200);
  
   if(digitalRead(4) == HIGH) {
     retValue = 2;
     Serial.println("DIGITAL PIN 4 HIGH");
    }  
    Serial.println(retValue);    // 2
    //delay(200);
    
   if(digitalRead(5) == HIGH) {
     retValue = 3;
     Serial.println("DIGITAL PIN 5 HIGH");
   }  
    Serial.println(retValue);    // 2
    //delay(200);
  
   if(digitalRead(6) == HIGH) {
     retValue = 4;  
     Serial.println("DIGITAL PIN 6 HIGH");
    }
   Serial.println(retValue);     // 2
   //delay(200);
  
   if(digitalRead(7) == HIGH) {
     retValue = 5;  
     Serial.println("DIGITAL PIN 7 HIGH");
  }
    Serial.println(retValue);    // 2
    //delay(200);
  
   if(digitalRead(8) == HIGH) {
     retValue = 6;  
     Serial.println("DIGITAL PIN 8 HIGH");
  }
    Serial.println(retValue);    // 2
    //delay(200);
  
   if(digitalRead(9) == HIGH) {
     retValue = retValue + 7;  
  }
    Serial.println(retValue);    // 2
    delay(200);
      
      i = 0;
      
  if(retValue == 1) {
      EnabledRobot();
      Serial.println("EnabledRobot");
  }
  //delay(200);
  if(retValue == 2) {
      DisabledRobot();
      Serial.println("DisabledRobot");
  }
  //delay(200); 
 
  if(retValue == 3) {
      ShotReady(); 
      Serial.println("ShotReady");
  }
  //delay(200);  
  
  if(retValue == 4) {
      TuskRetractPosition();       // Problem
      Serial.println("TuskRetractPosition");
    }
  //delay(200); 
  
  if(retValue == 5) {
      TuskIntermediatePosition();  // Problem
      Serial.println("TuskIntermediatePosition");
    }
  //delay(200); 
  
  if(retValue == 6) {
      TuskExtendedPosition(); 
      Serial.println("TuskExtendedPosition");
    }
  //delay(200);   
  
  if(retValue == 7) {
      HotGoalLeft();
      Serial.println("HotGoalLeft");
    }
  //delay(200);  
  
  if(retValue == 8) {
      HotGoalRight();
      Serial.println("HotGoalRight");
    }
  //delay(200);   
   // Serial.println("GetLEDStatus Loop");
}

// Enabled Robot
void EnabledRobot() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //Green
  }
  strip.show();
}

// Disabled Robot
void DisabledRobot() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); //Red
  }  
  strip.show();
}

// Shot Ready
void ShotReady() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,127)); //Cyan 
  }
  strip.show();
}

// Tusks Retracted
void TuskRetractPosition() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); //Dark Red  // PROBLEM
  } 
  strip.show();
}

// Tusks Intermediate
void TuskIntermediatePosition() {  
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,0,127)); //Blue      // PROBLEM
  }
  strip.show(); 
} 

// Tusks Extended
void TuskExtendedPosition() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //green
  }
  strip.show();
}
  
// Auto Mode - Hot Goal Left
void HotGoalLeft() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(127,0,0)); //Red
  }
  strip.show();
}

// Auto Mode - Hot Goal Right
void HotGoalRight() {
  for(int q = 0; q < strip.numPixels(); q++){
    strip.setPixelColor(q, strip.Color(0,127,0)); //Green
  }
  strip.show();
}
    
